type UserProfile = 
 record {
   badges: vec Badge;
   correctAnswers: nat;
   lastActive: int;
   level: nat;
   "principal": principal;
   streak: nat;
   topicScores: vec record {
                      text;
                      nat;
                    };
   totalPoints: nat;
   totalQuizzes: nat;
 };
type LeaderboardEntry = 
 record {
   "principal": principal;
   rank: nat;
   totalPoints: nat;
 };
type Badge = 
 record {
   criteria: text;
   description: text;
   earnedAt: int;
   id: text;
   imageUrl: text;
   name: text;
   rarity: text;
 };
service : {
  getAvailableBadges: () -> (vec record {
                                   text;
                                   text;
                                   text;
                                   text;
                                   text;
                                 }) query;
  getBadgeCount: () -> (nat) query;
  getLeaderboard: () -> (vec LeaderboardEntry) query;
  getMyBadges: () -> (vec Badge) query;
  getMyProfile: () -> (UserProfile) query;
  getQuizStats: () ->
   (record {
      avgScore: nat;
      totalBadgesAwarded: nat;
      totalQuizzes: nat;
      totalUsers: nat;
    }) query;
  getTopicLeaderboard: (topic: text) -> (vec LeaderboardEntry) query;
  saveQuizResult: (topic: text, score: nat, correct: nat, total: nat) ->
   (UserProfile);
}
